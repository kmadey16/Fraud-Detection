{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Credit card fraud prediction in financial payment services"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Intro to credit card fraud levels increasing. Industry metrics, etc. Add here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Getting familiar with the data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The tricky part about transactional data is that due to the private nature of transactions, there aren't any publicly available datasets. Yet transactional data is still needed for continued research into fraud detection. \n",
    "\n",
    "The simulated data used here is based on a simulator called PaySim which helps bridge the gap between unavailable public data and the need to continue improving fraud detection systems. PaySim utilizes aggregated real world data taken from a private dataset to generate synthetic transactional data resembling normal transactions.\n",
    "This real world data is a sample of real transactions extracted from financial logs from a mobile money service implemented in an African country. More information about the data can be found here: https://www.kaggle.com/ealaxi/paysim1 \n",
    "\n",
    "The main challenge the dataset poses to predicting fraud is the highly imbalanced distribution between positive and negative classes in 6 million rows of data.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Dataset Description"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. step - maps a unit of time in the real world. In this case 1 step is 1 hour of time. Total steps 744 (30 days simulation).\n",
    "2. type - CASH-IN, CASH-OUT, DEBIT, PAYMENT and TRANSFER.\n",
    "3. amount - amount of the transaction in local currency.\n",
    "4. nameOrig - customer who started the transaction\n",
    "5. oldbalanceOrg - initial balance before the transaction\n",
    "6. newbalanceOrig - new balance after the transaction\n",
    "7. nameDest - customer who is the recipient of the transaction\n",
    "8. oldbalanceDest - initial balance recipient before the transaction. Note that there is not information for customers that start with M (Merchants).\n",
    "9. newbalanceDest - new balance recipient after the transaction. Note that there is not information for customers that start with M (Merchants).\n",
    "10. isFraud - This is the transactions made by the fraudulent agents inside the simulation. In this specific dataset the fraudulent behavior of the agents aims to profit by taking control or customers accounts and try to empty the funds by transferring to another account and then cashing out of the system.\n",
    "11. isFlaggedFraud - The business model aims to control massive transfers from one account to another and flags illegal attempts. An illegal attempt in this dataset is an attempt to transfer more than 200.000 in a single transaction."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Our goal"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Most companies have a fraud loss rate of: ___\n",
    "We aim to generate a model that falls within this range. We want to be able to better predict and label fraud transactions when they occur. \n",
    "Other metrics we can use to evaluate our model __\n",
    "\n",
    "Include info from web on metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Data Wrangling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We can start by importing necessary libraries\n",
    "\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import pandas as pd\n",
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>step</th>\n",
       "      <th>type</th>\n",
       "      <th>amount</th>\n",
       "      <th>nameOrig</th>\n",
       "      <th>oldbalanceOrg</th>\n",
       "      <th>newbalanceOrig</th>\n",
       "      <th>nameDest</th>\n",
       "      <th>oldbalanceDest</th>\n",
       "      <th>newbalanceDest</th>\n",
       "      <th>isFraud</th>\n",
       "      <th>isFlaggedFraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>9839.64</td>\n",
       "      <td>C1231006815</td>\n",
       "      <td>170136.0</td>\n",
       "      <td>160296.36</td>\n",
       "      <td>M1979787155</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>1864.28</td>\n",
       "      <td>C1666544295</td>\n",
       "      <td>21249.0</td>\n",
       "      <td>19384.72</td>\n",
       "      <td>M2044282225</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>181.00</td>\n",
       "      <td>C1305486145</td>\n",
       "      <td>181.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>C553264065</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>CASH_OUT</td>\n",
       "      <td>181.00</td>\n",
       "      <td>C840083671</td>\n",
       "      <td>181.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>C38997010</td>\n",
       "      <td>21182.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>11668.14</td>\n",
       "      <td>C2048537720</td>\n",
       "      <td>41554.0</td>\n",
       "      <td>29885.86</td>\n",
       "      <td>M1230701703</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   step      type    amount     nameOrig  oldbalanceOrg  newbalanceOrig  \\\n",
       "0     1   PAYMENT   9839.64  C1231006815       170136.0       160296.36   \n",
       "1     1   PAYMENT   1864.28  C1666544295        21249.0        19384.72   \n",
       "2     1  TRANSFER    181.00  C1305486145          181.0            0.00   \n",
       "3     1  CASH_OUT    181.00   C840083671          181.0            0.00   \n",
       "4     1   PAYMENT  11668.14  C2048537720        41554.0        29885.86   \n",
       "\n",
       "      nameDest  oldbalanceDest  newbalanceDest  isFraud  isFlaggedFraud  \n",
       "0  M1979787155             0.0             0.0        0               0  \n",
       "1  M2044282225             0.0             0.0        0               0  \n",
       "2   C553264065             0.0             0.0        1               0  \n",
       "3    C38997010         21182.0             0.0        1               0  \n",
       "4  M1230701703             0.0             0.0        0               0  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# This gives us a first look at the data\n",
    "df = pd.read_csv('fraud_data.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "step              0\n",
       "type              0\n",
       "amount            0\n",
       "nameOrig          0\n",
       "oldbalanceOrg     0\n",
       "newbalanceOrig    0\n",
       "nameDest          0\n",
       "oldbalanceDest    0\n",
       "newbalanceDest    0\n",
       "isFraud           0\n",
       "isFlaggedFraud    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We can start by checking for any null values\n",
    "# We can see that there are no null values!\n",
    "\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>amount</th>\n",
       "      <th>oldbalanceOrg</th>\n",
       "      <th>newbalanceOrig</th>\n",
       "      <th>oldbalanceDest</th>\n",
       "      <th>newbalanceDest</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6.362620e+06</td>\n",
       "      <td>6.362620e+06</td>\n",
       "      <td>6.362620e+06</td>\n",
       "      <td>6.362620e+06</td>\n",
       "      <td>6.362620e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.798619e+05</td>\n",
       "      <td>8.338831e+05</td>\n",
       "      <td>8.551137e+05</td>\n",
       "      <td>1.100702e+06</td>\n",
       "      <td>1.224996e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>6.038582e+05</td>\n",
       "      <td>2.888243e+06</td>\n",
       "      <td>2.924049e+06</td>\n",
       "      <td>3.399180e+06</td>\n",
       "      <td>3.674129e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.338957e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>0.000000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>7.487194e+04</td>\n",
       "      <td>1.420800e+04</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>1.327057e+05</td>\n",
       "      <td>2.146614e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2.087215e+05</td>\n",
       "      <td>1.073152e+05</td>\n",
       "      <td>1.442584e+05</td>\n",
       "      <td>9.430367e+05</td>\n",
       "      <td>1.111909e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>9.244552e+07</td>\n",
       "      <td>5.958504e+07</td>\n",
       "      <td>4.958504e+07</td>\n",
       "      <td>3.560159e+08</td>\n",
       "      <td>3.561793e+08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             amount  oldbalanceOrg  newbalanceOrig  oldbalanceDest  \\\n",
       "count  6.362620e+06   6.362620e+06    6.362620e+06    6.362620e+06   \n",
       "mean   1.798619e+05   8.338831e+05    8.551137e+05    1.100702e+06   \n",
       "std    6.038582e+05   2.888243e+06    2.924049e+06    3.399180e+06   \n",
       "min    0.000000e+00   0.000000e+00    0.000000e+00    0.000000e+00   \n",
       "25%    1.338957e+04   0.000000e+00    0.000000e+00    0.000000e+00   \n",
       "50%    7.487194e+04   1.420800e+04    0.000000e+00    1.327057e+05   \n",
       "75%    2.087215e+05   1.073152e+05    1.442584e+05    9.430367e+05   \n",
       "max    9.244552e+07   5.958504e+07    4.958504e+07    3.560159e+08   \n",
       "\n",
       "       newbalanceDest  \n",
       "count    6.362620e+06  \n",
       "mean     1.224996e+06  \n",
       "std      3.674129e+06  \n",
       "min      0.000000e+00  \n",
       "25%      0.000000e+00  \n",
       "50%      2.146614e+05  \n",
       "75%      1.111909e+06  \n",
       "max      3.561793e+08  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# A few of the columns we can look at in detail are amount, old and new origin balance, old and new destination balance \n",
    "\n",
    "df[['amount', 'oldbalanceOrg', 'newbalanceOrig','oldbalanceDest', 'newbalanceDest']].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 6362620 entries, 0 to 6362619\n",
      "Data columns (total 11 columns):\n",
      " #   Column          Dtype  \n",
      "---  ------          -----  \n",
      " 0   step            int64  \n",
      " 1   type            object \n",
      " 2   amount          float64\n",
      " 3   nameOrig        object \n",
      " 4   oldbalanceOrg   float64\n",
      " 5   newbalanceOrig  float64\n",
      " 6   nameDest        object \n",
      " 7   oldbalanceDest  float64\n",
      " 8   newbalanceDest  float64\n",
      " 9   isFraud         int64  \n",
      " 10  isFlaggedFraud  int64  \n",
      "dtypes: float64(5), int64(3), object(3)\n",
      "memory usage: 534.0+ MB\n"
     ]
    }
   ],
   "source": [
    "# We can also verify the data types\n",
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## EDA (Exploratory Data Analysis)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can first get a look of a breakdown of our transactions by type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(8,6))\n",
    "sns.barplot(x = df.type.unique(), y = df.groupby('type')['type'].value_counts())\n",
    "plt.ylabel('count')\n",
    "plt.xlabel('transaction type')\n",
    "plt.title('All transactions by type')\n",
    "for p in ax.patches:\n",
    "    ax.annotate(format(p.get_height(), ','), \n",
    "                   (p.get_x() + p.get_width() / 2., p.get_height()), \n",
    "                   ha = 'center', va = 'center', \n",
    "                   xytext = (0, 9), \n",
    "                   textcoords = 'offset points')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Of all the transactions above, we can get a better look into the fraudulent ones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Confusion matrix for simulator results')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "y_true = list(df['isFraud'])\n",
    "y_pred = list(df['isFlaggedFraud'])\n",
    "cf_matrix = metrics.confusion_matrix(y_true, y_pred)\n",
    "fig, ax = plt.subplots(figsize=(8,6))\n",
    "sns.heatmap(cf_matrix, annot=True, cmap='YlGnBu')\n",
    "plt.xlabel(\"isFlaggedFraud\")\n",
    "plt.ylabel(\"isFraud\")\n",
    "plt.title(\"Confusion matrix for simulator results\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    6354407\n",
       "1       8213\n",
       "Name: isFraud, dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Our data contains 8213 fradulent transactions\n",
    "df['isFraud'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that out of over 6 million transactions, only 16 transactions were actually flagged as fraud, and over 8200 were fradulent transactions! The fraud detection system in place is not performing very well. \n",
    "\n",
    "Additionally, we see that the fraud transactions are only occuring in either TRANSFER or CASH_OUT types."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 576x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "transaction_types = ['PAYMENT', 'CASH_OUT', 'CASH_IN', 'DEBIT', 'TRANSFER']\n",
    "\n",
    "fig, ax = plt.subplots(figsize=(8,6))\n",
    "sns.barplot(x= transaction_types, y=df.groupby('type')['isFraud'].sum())\n",
    "plt.title('Fraud transactions by type')\n",
    "plt.xlabel('type')\n",
    "plt.ylabel('count')\n",
    "for p in ax.patches:\n",
    "    ax.annotate(format(p.get_height(), ','), \n",
    "                   (p.get_x() + p.get_width() / 2., p.get_height()), \n",
    "                   ha = 'center', va = 'center', \n",
    "                   xytext = (0, 9), \n",
    "                   textcoords = 'offset points')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "flagged = df[df['isFlaggedFraud'] == 1]\n",
    "unflagged = df[df['isFlaggedFraud'] == 0]\n",
    "fraud = df[df['isFraud'] == 1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>step</th>\n",
       "      <th>type</th>\n",
       "      <th>amount</th>\n",
       "      <th>nameOrig</th>\n",
       "      <th>oldbalanceOrg</th>\n",
       "      <th>newbalanceOrig</th>\n",
       "      <th>nameDest</th>\n",
       "      <th>oldbalanceDest</th>\n",
       "      <th>newbalanceDest</th>\n",
       "      <th>isFraud</th>\n",
       "      <th>isFlaggedFraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2736446</th>\n",
       "      <td>212</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>4953893.08</td>\n",
       "      <td>C728984460</td>\n",
       "      <td>4953893.08</td>\n",
       "      <td>4953893.08</td>\n",
       "      <td>C639921569</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3247297</th>\n",
       "      <td>250</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>1343002.08</td>\n",
       "      <td>C1100582606</td>\n",
       "      <td>1343002.08</td>\n",
       "      <td>1343002.08</td>\n",
       "      <td>C1147517658</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3760288</th>\n",
       "      <td>279</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>536624.41</td>\n",
       "      <td>C1035541766</td>\n",
       "      <td>536624.41</td>\n",
       "      <td>536624.41</td>\n",
       "      <td>C1100697970</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5563713</th>\n",
       "      <td>387</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>4892193.09</td>\n",
       "      <td>C908544136</td>\n",
       "      <td>4892193.09</td>\n",
       "      <td>4892193.09</td>\n",
       "      <td>C891140444</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5996407</th>\n",
       "      <td>425</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>10000000.00</td>\n",
       "      <td>C689608084</td>\n",
       "      <td>19585040.37</td>\n",
       "      <td>19585040.37</td>\n",
       "      <td>C1392803603</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5996409</th>\n",
       "      <td>425</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>9585040.37</td>\n",
       "      <td>C452586515</td>\n",
       "      <td>19585040.37</td>\n",
       "      <td>19585040.37</td>\n",
       "      <td>C1109166882</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6168499</th>\n",
       "      <td>554</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>3576297.10</td>\n",
       "      <td>C193696150</td>\n",
       "      <td>3576297.10</td>\n",
       "      <td>3576297.10</td>\n",
       "      <td>C484597480</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6205439</th>\n",
       "      <td>586</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>353874.22</td>\n",
       "      <td>C1684585475</td>\n",
       "      <td>353874.22</td>\n",
       "      <td>353874.22</td>\n",
       "      <td>C1770418982</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6266413</th>\n",
       "      <td>617</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>2542664.27</td>\n",
       "      <td>C786455622</td>\n",
       "      <td>2542664.27</td>\n",
       "      <td>2542664.27</td>\n",
       "      <td>C661958277</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6281482</th>\n",
       "      <td>646</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>10000000.00</td>\n",
       "      <td>C19004745</td>\n",
       "      <td>10399045.08</td>\n",
       "      <td>10399045.08</td>\n",
       "      <td>C1806199534</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6281484</th>\n",
       "      <td>646</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>399045.08</td>\n",
       "      <td>C724693370</td>\n",
       "      <td>10399045.08</td>\n",
       "      <td>10399045.08</td>\n",
       "      <td>C1909486199</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6296014</th>\n",
       "      <td>671</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>3441041.46</td>\n",
       "      <td>C917414431</td>\n",
       "      <td>3441041.46</td>\n",
       "      <td>3441041.46</td>\n",
       "      <td>C1082139865</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6351225</th>\n",
       "      <td>702</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>3171085.59</td>\n",
       "      <td>C1892216157</td>\n",
       "      <td>3171085.59</td>\n",
       "      <td>3171085.59</td>\n",
       "      <td>C1308068787</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6362460</th>\n",
       "      <td>730</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>10000000.00</td>\n",
       "      <td>C2140038573</td>\n",
       "      <td>17316255.05</td>\n",
       "      <td>17316255.05</td>\n",
       "      <td>C1395467927</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6362462</th>\n",
       "      <td>730</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>7316255.05</td>\n",
       "      <td>C1869569059</td>\n",
       "      <td>17316255.05</td>\n",
       "      <td>17316255.05</td>\n",
       "      <td>C1861208726</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6362584</th>\n",
       "      <td>741</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>5674547.89</td>\n",
       "      <td>C992223106</td>\n",
       "      <td>5674547.89</td>\n",
       "      <td>5674547.89</td>\n",
       "      <td>C1366804249</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         step      type       amount     nameOrig  oldbalanceOrg  \\\n",
       "2736446   212  TRANSFER   4953893.08   C728984460     4953893.08   \n",
       "3247297   250  TRANSFER   1343002.08  C1100582606     1343002.08   \n",
       "3760288   279  TRANSFER    536624.41  C1035541766      536624.41   \n",
       "5563713   387  TRANSFER   4892193.09   C908544136     4892193.09   \n",
       "5996407   425  TRANSFER  10000000.00   C689608084    19585040.37   \n",
       "5996409   425  TRANSFER   9585040.37   C452586515    19585040.37   \n",
       "6168499   554  TRANSFER   3576297.10   C193696150     3576297.10   \n",
       "6205439   586  TRANSFER    353874.22  C1684585475      353874.22   \n",
       "6266413   617  TRANSFER   2542664.27   C786455622     2542664.27   \n",
       "6281482   646  TRANSFER  10000000.00    C19004745    10399045.08   \n",
       "6281484   646  TRANSFER    399045.08   C724693370    10399045.08   \n",
       "6296014   671  TRANSFER   3441041.46   C917414431     3441041.46   \n",
       "6351225   702  TRANSFER   3171085.59  C1892216157     3171085.59   \n",
       "6362460   730  TRANSFER  10000000.00  C2140038573    17316255.05   \n",
       "6362462   730  TRANSFER   7316255.05  C1869569059    17316255.05   \n",
       "6362584   741  TRANSFER   5674547.89   C992223106     5674547.89   \n",
       "\n",
       "         newbalanceOrig     nameDest  oldbalanceDest  newbalanceDest  isFraud  \\\n",
       "2736446      4953893.08   C639921569             0.0             0.0        1   \n",
       "3247297      1343002.08  C1147517658             0.0             0.0        1   \n",
       "3760288       536624.41  C1100697970             0.0             0.0        1   \n",
       "5563713      4892193.09   C891140444             0.0             0.0        1   \n",
       "5996407     19585040.37  C1392803603             0.0             0.0        1   \n",
       "5996409     19585040.37  C1109166882             0.0             0.0        1   \n",
       "6168499      3576297.10   C484597480             0.0             0.0        1   \n",
       "6205439       353874.22  C1770418982             0.0             0.0        1   \n",
       "6266413      2542664.27   C661958277             0.0             0.0        1   \n",
       "6281482     10399045.08  C1806199534             0.0             0.0        1   \n",
       "6281484     10399045.08  C1909486199             0.0             0.0        1   \n",
       "6296014      3441041.46  C1082139865             0.0             0.0        1   \n",
       "6351225      3171085.59  C1308068787             0.0             0.0        1   \n",
       "6362460     17316255.05  C1395467927             0.0             0.0        1   \n",
       "6362462     17316255.05  C1861208726             0.0             0.0        1   \n",
       "6362584      5674547.89  C1366804249             0.0             0.0        1   \n",
       "\n",
       "         isFlaggedFraud  \n",
       "2736446               1  \n",
       "3247297               1  \n",
       "3760288               1  \n",
       "5563713               1  \n",
       "5996407               1  \n",
       "5996409               1  \n",
       "6168499               1  \n",
       "6205439               1  \n",
       "6266413               1  \n",
       "6281482               1  \n",
       "6281484               1  \n",
       "6296014               1  \n",
       "6351225               1  \n",
       "6362460               1  \n",
       "6362462               1  \n",
       "6362584               1  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "flagged"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Additionally,'isFlaggedFraud' is not related to customers who transact more than once where 'isFlagedFraud' is set.\n",
    " We obtain a list of names where there was more than 1 fraud transaction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "names = []\n",
    "multiple_flagged = []\n",
    "\n",
    "for i in fraud['nameDest'].value_counts().index:\n",
    "    if fraud['nameDest'].value_counts()[i] > 1:\n",
    "        names.append(i)\n",
    "    if i in flagged['nameDest']:\n",
    "        multiple_flagged.append(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Addresses with multiple fraud transactions that were flagged: 0\n",
      "Number of addresses with multiple fraud transactions: 44\n"
     ]
    }
   ],
   "source": [
    "# We see that none of the addresses that had multiple fraud transactions were flagged as fraud\n",
    "print('Addresses with multiple fraud transactions that were flagged: {}'.format(len(multiple_flagged)))\n",
    "\n",
    "print('Number of addresses with multiple fraud transactions: {}'.format(len(names)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After looking at these, we can make the decision to drop the 'isFlaggedFraud' column, for several reasons.\n",
    "\n",
    "    1. There are only 16 flagged transactions out of over 6 million.\n",
    "    2. The column does not flag all transfers over 200,000 as fraud, and is not related to transfer type or amount. \n",
    "    3. The column is not based on multiple fraud transactions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop(labels='isFlaggedFraud', axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see from the documentation that there are two categories of destination columns, Merchant and Customer. \n",
    "Merchant recepients were not involved in any of the fraud transactions. Additionally, millions of rows of unique labels would be taxing on our computational time. We can drop the nameorigin and namedest columns as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop(labels=['nameOrig','nameDest'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>step</th>\n",
       "      <th>type</th>\n",
       "      <th>amount</th>\n",
       "      <th>oldbalanceOrg</th>\n",
       "      <th>newbalanceOrig</th>\n",
       "      <th>oldbalanceDest</th>\n",
       "      <th>newbalanceDest</th>\n",
       "      <th>isFraud</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>9839.64</td>\n",
       "      <td>170136.0</td>\n",
       "      <td>160296.36</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>1864.28</td>\n",
       "      <td>21249.0</td>\n",
       "      <td>19384.72</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>181.00</td>\n",
       "      <td>181.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>CASH_OUT</td>\n",
       "      <td>181.00</td>\n",
       "      <td>181.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>21182.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>11668.14</td>\n",
       "      <td>41554.0</td>\n",
       "      <td>29885.86</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   step      type    amount  oldbalanceOrg  newbalanceOrig  oldbalanceDest  \\\n",
       "0     1   PAYMENT   9839.64       170136.0       160296.36             0.0   \n",
       "1     1   PAYMENT   1864.28        21249.0        19384.72             0.0   \n",
       "2     1  TRANSFER    181.00          181.0            0.00             0.0   \n",
       "3     1  CASH_OUT    181.00          181.0            0.00         21182.0   \n",
       "4     1   PAYMENT  11668.14        41554.0        29885.86             0.0   \n",
       "\n",
       "   newbalanceDest  isFraud  \n",
       "0             0.0        0  \n",
       "1             0.0        0  \n",
       "2             0.0        1  \n",
       "3             0.0        1  \n",
       "4             0.0        0  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Generating a heatmap to identify feature correlations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x720 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(figsize=(12,10))\n",
    "_ = sns.heatmap(df.corr(), cmap = 'Greens', annot=True)\n",
    "_ = plt.title('Heatmap showing feature correlations', fontsize=20)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Looking at the above, we see that 'isFraud' is correlated most to 'amount' (and 'step' a little less so). We look into those below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We first see how the amount transacted is distributed between fraud and nonfraud transactions\n",
    "\n",
    "# We apply a log transformation to deal with the skewed data\n",
    "\n",
    "fig, ax = plt.subplots(1,2, figsize=(18,6))\n",
    "_ = sns.boxplot(x=df.isFraud, y=df.amount, ax=ax[0])\n",
    "_ = sns.boxplot(x=df.isFraud, y=np.log1p(df.amount), ax=ax[1])\n",
    "_ = ax[0].title.set_text('Distribution of transaction amount for all transactions')\n",
    "_ = ax[1].title.set_text('Distribution of transaction amount after transformation')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since all of our fraud transactions occured in only TRANSFER and CASH_OUT transactions, we can get a better look at those as well."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "transfer = df[df['type'] == 'TRANSFER']\n",
    "cashout = df[df['type'] == 'CASH_OUT']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1296x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Here we use median instead of mean to illustrate central tendency in order to suppress the effect of outliers\n",
    "\n",
    "fig,ax = plt.subplots(1,2,figsize=(18,6))\n",
    "ax[0].title.set_text(\"Median Transaction amount for transfers\")\n",
    "ax[1].title.set_text(\"Median Transaction amount for cash outs\")\n",
    "\n",
    "_ = sns.barplot(x=['non-Fraud', 'Fraud'], y=transfer.groupby('isFraud')['amount'].median(),ax=ax[0])\n",
    "_ = sns.barplot(x=['non-Fraud', 'Fraud'], y=cashout.groupby('isFraud')['amount'].median(),ax=ax[1])\n",
    "for i in range(2):\n",
    "    for p in ax[i].patches:\n",
    "        ax[i].annotate(format(p.get_height(), ','), \n",
    "                   (p.get_x() + p.get_width() / 2., p.get_height()), \n",
    "                   ha = 'center', va = 'center', \n",
    "                   xytext = (0, 9), \n",
    "                   textcoords = 'offset points')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The median transaction amount in CASH_OUT transactions is almost 3x higher in fraudulent transactions vs nonfraudulent ones. In transfers, the figure is much closer to even."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Visualizing a time series"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Another aspect of fraud that we can look into is what part of the day it occurs. We can use 'step' to group the transactions into a per day basis to identify if a pattern is present."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Here we plot the fradulent transactions on a per hour basis\n",
    "\n",
    "df['hour'] = df.step % 24\n",
    "frauds_per_hour = pd.concat([df.groupby(\"hour\")[\"isFraud\"].sum(),df.groupby(\"hour\")[\"isFraud\"].count()],axis=1)\n",
    "frauds_per_hour.columns = ['num_frauds', 'num_transactions']\n",
    "frauds_per_hour['fraud_rate'] = frauds_per_hour.num_frauds / frauds_per_hour.num_transactions\n",
    "_ = plt.subplots(figsize=(10,8))\n",
    "_ = sns.barplot(x=frauds_per_hour.index, y= frauds_per_hour.fraud_rate, color='green')\n",
    "_ = plt.title('Fraud rate per hour of day', fontsize=15)\n",
    "_ = plt.xlabel('hour', fontsize=15)\n",
    "_ = plt.ylabel('fraud rate', fontsize=15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# We can also apply the same concept to visualize fraud rate on a weekly basis\n",
    "\n",
    "df['dayofmonth'] = round(df.step / 24)\n",
    "df['dayofweek'] = df['dayofmonth'] % 7\n",
    "frauds_per_day = pd.concat([df.groupby(\"dayofweek\")[\"isFraud\"].sum(),df.groupby(\"dayofweek\")[\"isFraud\"].count()],axis=1)\n",
    "frauds_per_day.columns = ['num_frauds', 'num_transactions']\n",
    "frauds_per_day['fraud_rate'] = frauds_per_day.num_frauds / frauds_per_day.num_transactions\n",
    "_ = plt.subplots(figsize=(10,8))\n",
    "_ = sns.barplot(x=list(range(1,8)), y= frauds_per_day.fraud_rate, color='green')\n",
    "_ = plt.title('Fraud rate per day of week', fontsize=15)\n",
    "_ = plt.xlabel('Day of week', fontsize=15)\n",
    "_ = plt.ylabel('fraud rate', fontsize=15)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Two main conclusions from our graphs here. Those are that fraud tends to occur in the early hour of the morning, before 9:00 am, and that it also tends to occur towards the end of the week."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Engineering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>step</th>\n",
       "      <th>type</th>\n",
       "      <th>amount</th>\n",
       "      <th>oldbalanceOrg</th>\n",
       "      <th>newbalanceOrig</th>\n",
       "      <th>oldbalanceDest</th>\n",
       "      <th>newbalanceDest</th>\n",
       "      <th>isFraud</th>\n",
       "      <th>hour</th>\n",
       "      <th>dayofmonth</th>\n",
       "      <th>dayofweek</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>9839.64</td>\n",
       "      <td>170136.0</td>\n",
       "      <td>160296.36</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>1864.28</td>\n",
       "      <td>21249.0</td>\n",
       "      <td>19384.72</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>TRANSFER</td>\n",
       "      <td>181.00</td>\n",
       "      <td>181.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>CASH_OUT</td>\n",
       "      <td>181.00</td>\n",
       "      <td>181.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>21182.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>PAYMENT</td>\n",
       "      <td>11668.14</td>\n",
       "      <td>41554.0</td>\n",
       "      <td>29885.86</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   step      type    amount  oldbalanceOrg  newbalanceOrig  oldbalanceDest  \\\n",
       "0     1   PAYMENT   9839.64       170136.0       160296.36             0.0   \n",
       "1     1   PAYMENT   1864.28        21249.0        19384.72             0.0   \n",
       "2     1  TRANSFER    181.00          181.0            0.00             0.0   \n",
       "3     1  CASH_OUT    181.00          181.0            0.00         21182.0   \n",
       "4     1   PAYMENT  11668.14        41554.0        29885.86             0.0   \n",
       "\n",
       "   newbalanceDest  isFraud  hour  dayofmonth  dayofweek  \n",
       "0             0.0        0     1         0.0        0.0  \n",
       "1             0.0        0     1         0.0        0.0  \n",
       "2             0.0        1     1         0.0        0.0  \n",
       "3             0.0        1     1         0.0        0.0  \n",
       "4             0.0        0     1         0.0        0.0  "
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We have several types of features shown in our df now: Datetime features, numerical features, and categorical features. We need to do some work on all of these."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1 = df.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Datetime"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The main datetime feature is 'step'. We also created 'hour', 'day', and 'dayofweek'. So this feature has already been addressed. We saw earlier how fraud transaction rates are much higher in the early morning hours and on the later days of the week."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Those we have already created\n",
    "\n",
    "df1['hour'] = df1.step % 24\n",
    "df1['dayofmonth'] = round(df1.step / 24)\n",
    "df1['dayofweek'] = df1['dayofweek'] % 7\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Categorical"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The main categorical feature we will focus on here is 'type', since the others have been removed during wrangling. \n",
    "Here we can generate dummy variables for the 'type' variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>step</th>\n",
       "      <th>amount</th>\n",
       "      <th>oldbalanceOrg</th>\n",
       "      <th>newbalanceOrig</th>\n",
       "      <th>oldbalanceDest</th>\n",
       "      <th>newbalanceDest</th>\n",
       "      <th>isFraud</th>\n",
       "      <th>hour</th>\n",
       "      <th>dayofmonth</th>\n",
       "      <th>dayofweek</th>\n",
       "      <th>type_CASH_IN</th>\n",
       "      <th>type_CASH_OUT</th>\n",
       "      <th>type_DEBIT</th>\n",
       "      <th>type_PAYMENT</th>\n",
       "      <th>type_TRANSFER</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>9839.64</td>\n",
       "      <td>170136.0</td>\n",
       "      <td>160296.36</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1864.28</td>\n",
       "      <td>21249.0</td>\n",
       "      <td>19384.72</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>181.00</td>\n",
       "      <td>181.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>181.00</td>\n",
       "      <td>181.0</td>\n",
       "      <td>0.00</td>\n",
       "      <td>21182.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>11668.14</td>\n",
       "      <td>41554.0</td>\n",
       "      <td>29885.86</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   step    amount  oldbalanceOrg  newbalanceOrig  oldbalanceDest  \\\n",
       "0     1   9839.64       170136.0       160296.36             0.0   \n",
       "1     1   1864.28        21249.0        19384.72             0.0   \n",
       "2     1    181.00          181.0            0.00             0.0   \n",
       "3     1    181.00          181.0            0.00         21182.0   \n",
       "4     1  11668.14        41554.0        29885.86             0.0   \n",
       "\n",
       "   newbalanceDest  isFraud  hour  dayofmonth  dayofweek  type_CASH_IN  \\\n",
       "0             0.0        0     1         0.0        0.0             0   \n",
       "1             0.0        0     1         0.0        0.0             0   \n",
       "2             0.0        1     1         0.0        0.0             0   \n",
       "3             0.0        1     1         0.0        0.0             0   \n",
       "4             0.0        0     1         0.0        0.0             0   \n",
       "\n",
       "   type_CASH_OUT  type_DEBIT  type_PAYMENT  type_TRANSFER  \n",
       "0              0           0             1              0  \n",
       "1              0           0             1              0  \n",
       "2              0           0             0              1  \n",
       "3              1           0             0              0  \n",
       "4              0           0             1              0  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1 = pd.get_dummies(df1,columns=[\"type\"])\n",
    "df1.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Throughout the dataset, we can pick up on several other trends. Especially when it comes to the fraudulent transactions.\n",
    "\n",
    "For all the fraudulent transactions:\n",
    "\n",
    "1. We see that they all follow the same pattern: A 'TRANSFER' of a certain amount followed by a \"CASH_OUT' for the same amount immediately after.\n",
    "2. The 'oldbalanceDest'/'newbalanceDest' is updated (the majority of the time) only after the 'CASH_OUT', not the 'TRANSFER'\n",
    "\n",
    "We can use this information to generate a new feature that would help our model realize this pattern."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "coupled transactions: 4091\n",
      "coupled transactions where amount matches: 4075\n"
     ]
    }
   ],
   "source": [
    "# How many of the fraud transactions are coupled\n",
    "\n",
    "coupled = 0\n",
    "amount_match = 0\n",
    "for i in range(len(fraud) -1):\n",
    "    if (fraud.iloc[i].type == 'TRANSFER') & (fraud.iloc[i+1].type == 'CASH_OUT'):\n",
    "        coupled += 1\n",
    "        if fraud.iloc[i].amount == fraud.iloc[i+1].amount:\n",
    "            amount_match += 1\n",
    "            \n",
    "print('coupled transactions: {}'.format(coupled))\n",
    "print('coupled transactions where amount matches: {}'.format(amount_match))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Percentage of fraud transactions that are a part of a coupled transaction: 99.62254961646171\n",
      "Percentage of fraud transactions that are coupled with matching amounts: 99.23292341409959\n"
     ]
    }
   ],
   "source": [
    "# Since they are coupled, we can double them to see statistics of our findings\n",
    "\n",
    "print('Percentage of fraud transactions that are a part of a coupled transaction: {}'.format((2*coupled/len(fraud))*100))\n",
    "print('Percentage of fraud transactions that are coupled with matching amounts: {}'.format((2*amount_match/len(fraud))*100))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Now we can apply this as a feature to test all transactions\n",
    "\n",
    "def is_coupled(df):\n",
    "    df1['coupled'] = 0\n",
    "    for i in range(len(df) -1):\n",
    "        if (df1.iloc[i].type_TRANSFER == 1) & (df1.iloc[i+1].type_CASH_OUT == 1):\n",
    "            df1['coupled'][i] == 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1.apply(is_coupled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1.head(25)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CASH_OUT    4116\n",
       "TRANSFER    4097\n",
       "Name: type, dtype: int64"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fraud.type.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fraud = df1[df1.isFraud == 1]\n",
    "fraud.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1[df1.amount == 416001.33]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "df1.iloc[724]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Reducing data size"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Undersampling methods"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
